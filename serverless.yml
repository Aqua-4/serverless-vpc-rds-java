# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: employee-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: java8  #use at fn lv.
  region: ap-south-1
  lambdaHashingVersion: 20201221
  environment: #12 factor app ---|----use param store & secret store
    RDS_HOSTNAME: my-db.cvbik3j8hhjj.ap-south-1.rds.amazonaws.com:3306
    RDS_DB_NAME: emp_db
    RDS_USERNAME: admin
    RDS_PASSWORD: cuelogic
  vpc:
    securityGroupIds:
      - Ref: LambdaSecurityGroup
      - Ref: DbSecurityGroup
    subnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      - Ref: PrivateSubnet3

# you can add packaging information here
package:
  # artifact: target/hello-dev.jar
  artifact: "target/${self:service}-${self:provider.stage}.jar"

functions:
  employee:
    handler: com.serverless.Handler
    events:
      - httpApi:
          path: /db
          method: get

# you can add CloudFormation resource templates here
resources:
  Resources:
    Vpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        Tags:
          - Key: Name
            Value: emp-vpc

    # ---------------------------------subnets--------------------------
    # use region name via params
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ap-south-1a
        CidrBlock: 10.0.1.0/24
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PrivateSubnet1
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ap-south-1b
        CidrBlock: 10.0.2.0/24
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PrivateSubnet2
    PrivateSubnet3:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ap-south-1c
        CidrBlock: 10.0.3.0/24
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PrivateSubnet3
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ap-south-1a
        CidrBlock: 10.0.21.0/24
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PublicSubnet1

    # ------------------Sec Group---------------------------------------
    SshSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: ssh-legion
        GroupDescription: ssh from home
        SecurityGroupIngress:
          - CidrIp:  49.36.38.82/32
            IpProtocol: TCP
            FromPort: 22
            ToPort: 22
        SecurityGroupEgress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: All
        VpcId:
          Ref: Vpc

    DbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: db-${self:service}-${self:provider.stage}
        GroupDescription: Allow local inbound to port 3306 & allow all from SSH, no outbound
        SecurityGroupIngress:
          - CidrIp: 10.0.0.0/16
            IpProtocol: TCP
            FromPort: 3306
            ToPort: 3306
          - IpProtocol: All
            SourceSecurityGroupId:
              Ref: SshSecurityGroup
        SecurityGroupEgress:
          - CidrIp: 127.0.0.1/32
            IpProtocol: TCP
            FromPort: 3306
            ToPort: 3306
        VpcId:
          Ref: Vpc

    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: lambda-${self:service}-${self:provider.stage}
        GroupDescription: Allow outbound traffic to http & mysql, no inbound
        # SecurityGroupIngress:
        #   - IpProtocol: -1
        #     CidrIp: 127.0.0.1/32
        SecurityGroupEgress:
          - IpProtocol: TCP
            CidrIp: 0.0.0.0/0
            FromPort: 80
            ToPort: 80
          - IpProtocol: TCP
            CidrIp: 0.0.0.0/0
            FromPort: 3306
            ToPort: 3306
        VpcId:
          Ref: Vpc
    # ---------------------------EC2 Jump Start -----------------------------

    NeoInstance:
      Type: AWS::EC2::Instance
      Properties:
        InstanceType: t2.micro
        KeyName: "legion"
        ImageId: ami-010aff33ed5991201
        NetworkInterfaces: 
          - AssociatePublicIpAddress: true
            DeviceIndex: "0"
            SubnetId: 
              Ref: PublicSubnet1
            GroupSet:
              - Ref: SshSecurityGroup
        Tags:
          - Key: Name
            Value: NeoInstance

    # --------------------------RDS Database--------------------------------

    DbSubnetGroup:
      Type: "AWS::RDS::DBSubnetGroup"
      Properties:
        DBSubnetGroupName: db-${self:service}-${self:provider.stage}
        DBSubnetGroupDescription: Private database subnet group
        SubnetIds:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2
          - Ref: PrivateSubnet3

    EmployeeDb:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: my-db
        DBName: emp_db
        DBInstanceClass: db.t2.micro
        AllocatedStorage: "20"
        Engine: mysql
        EngineVersion: 8.0.16
        MasterUsername: admin
        MasterUserPassword: cuelogic
        VPCSecurityGroups:
          - Ref: DbSecurityGroup
        DBSubnetGroupName:
          Ref: DbSubnetGroup

    # DBUsername:
    #     NoEcho: 'true'
    #     Description: Username for MySQL database access
    #     Type: String
    #     MinLength: '1'
    #     MaxLength: '16'
    #     AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    #   DBPassword:
    #     NoEcho: 'true'
    #     Description: Password MySQL database access
    #     Type: String
    #     MinLength: '8'
    #     MaxLength: '41'
    #     AllowedPattern: '[a-zA-Z0-9]*'

    # --------------------------Route Tables--------------------------------

    # network, compute & storage --- TODO
    # 

    # Private Route
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PrivateRouteTable
    # PrivateRoute:
    #   Type: AWS::EC2::Route
    #   Properties:
    #     RouteTableId:
    #       Ref: PrivateRouteTable
    #     DestinationCidrBlock: 10.0.0.0/16
    #     InstanceId:
    #       Ref: EmployeeDb

    SubnetRouteTableAssociationPrivate1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet1
        RouteTableId:
          Ref: PrivateRouteTable
    SubnetRouteTableAssociationPrivate2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet2
        RouteTableId:
          Ref: PrivateRouteTable
    SubnetRouteTableAssociationPrivate3:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet3
        RouteTableId:
          Ref: PrivateRouteTable

    # Public Route
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: EmpInternetGateway
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: Vpc
        InternetGatewayId:
          Ref: InternetGateway

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: PublicRouteTable

    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
    SubnetRouteTableAssociationPublic1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnet1
        RouteTableId:
          Ref: PublicRouteTable
